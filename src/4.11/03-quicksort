4-16
====
We nearly did this in our addendum to 4-1. You could use that solution as-is and then extract the median rather than returning the two array halves.

4-17
====
(a) The left and right subarrays are always less than half the size of the array being considered. You always compare every other element in the array to the pivot. Then, when you recurse you again compare every element to the pivots, and so on. When n is a power of 2, this looks like the following (and asymptotics are similar for non powers of 2).

  (n-1) + (n-2) + (n-4) + (n-8) + ... + (n-n)
= n log2(n) - (2n-1)

(b) A similar idea holds, but the branching factor is a bit worse. As an upper bound you have n log_{3/2}(n) comparisons. It's a bit less since you do a lot less work in the 1/3 sides than the 2/3 sides and since you don't compare pivots to themselves, but it's not too far off.

4-18
====
- Maintain two pointers, one to the beginning and one to the end. While the beginning pointer is not blue, advance it. While the end pointer is blue, decrement it. When both pointers agree (or have crossed), go to the next step. When there's a blue at pointer 1 and a non-blue at pointer 2, swap the two nodes and advance/decrement the two pointers.
- If you didn't find that the entire array is blue, the right pointer is currently pointing at the last non-blue element. Reset the first pointer to the beginning, and proceed as before placing white elements on the right. When the pointers meet or cross the array is sorted.

4-19
====
As something of an aside, I thought the notion of "reversal" was a bit unclear here. Trying to do this where P^r is the inverse of P is futile.

(a) There are only n(n-1)/2 distinct pairs of n items. Inversions are pairs with a given property, so there are necessarily at most n(n-1)/2 of them.

For all such pairs to be inverted, for all i<j we have P(i)>P(j). In particular, we have the transitive chain

P(1) > P(2) > P(3) > ... > P(n)

Given that we're permutating distinct integers, this necessarily means we map i->(n-i+1).

(b) Let i<j and consider the relations >< with respect to P(i) and P(j). The reversal P^r(k) is definitionally equal to P^r(n-k+1), so consider P^r(n-i+1)=P(i) and P^r(n-j+1)=P(j). P(i) and P(j) have the same relations in either case, but when i<j we have n-i+1>n-j+1. Hence, the pair (i,j) yields an inversion for P iff the pair (n-i+1,n-j+1) does not yield an inversion for P^r.

Since (i,j) -> (n-i+1,n-j+1) is bijective, we can use this to enumerate the inversions of P^r. Their count is precisely equal to the non-inversions of P. Since there are n(n-1)/2 total pairs and they all either yield inversions or do not for P, this total is exactly n(n-1)/2, as desired.

(c) If you uniformly distribute permutations (note that no permutation is its own reversal), each permutation is equally as likely as its reversal. Choose a partitioning with k permutations on one side and their k reversals on the other. From (b), the total number of reversals is kn(n-1)/2, and dividing by the permutation count 2k we obtain the desired result.

4-20
====
This is basically the same as the coloring sort in 4-18, but stop after one step (divide on neg/non-neg rather than non-blue/blue). You iterate from both sides of the array inward precisely once.
